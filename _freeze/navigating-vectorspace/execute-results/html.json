{
  "hash": "7e581fc845f2d03b4be77ac20948e817",
  "result": {
    "engine": "knitr",
    "markdown": "---\ninclude-in-header:\n  - text: |\n      <style>\n      .r-output code {\n        word-break: break-wor !important;\n        white-space: pre-wrap !important;\n      }\n      </style>\n---\n\n\n# Navigating Vector Space {#sec-navigating-vectorspace}\n\n\n\n\n\n::: {.callout-important}\n## This page is still under construction. Come back soon!\n:::\n\n## Representing Psychological Constructs\n\nIn @sec-decontextualized-embeddings we measured the surprise in texts by comparing their embeddings to that of a single word: \"surprised\". But does the embedding of the word \"surprised\" fully capture the concept of surprise as an emotion? Faced with this question of construct validity, we have two options:\n\n1.    **Conduct a Validation Study:** We could find or construct a dataset of texts that were rated by a human (or ideally, multiple humans) on the extent to which they reflect the emotion of surprise. We could then compare our embedding-based surprise scores to the human rating and demonstrate that they correlate strongly. We could further note areas of disagreement between the human and embedding-based measures and investigate whether these reflect a difference between the constructs they are measuring.\n2.    **Use an Already-Validated Construct Definition:** Properly validating a new measure is hard work. When possible, psychology researchers often prefer to use an existing measure that has already been carefully validated in the past. But embeddings are very new to the field, so few if any validated vector representations of constructs are available. As it turns out, this is not a problem---any language-based psychological measure can be represented as a vector!\n\n### Distributed Dictionary Representation (DDR)\n\nLet's begin with a straightforward sort of psychological measure---the dictionary. We have already discussed dictionaries extensively in @sec-word-counting and noted that psychology researchers have been constructing, validating, and publicizing dictionaries for decades (@sec-dictionary-sources). But these dictionaries are designed for word counting---How do we apply them to a vector-based analysis? @garten_etal_2018 propose a simple solution: Get word embeddings (@sec-word-embeddings) for each word in the dictionary, and average them together to create a single Distributed Dictionary Representation (DDR). The dictionary construct can then be measured by comparing text embeddings to the DDR.\n\nDDR cannot entirely replace word counts; for linguistic concepts like pronoun use or the passive voice, dictionary-based word counts are still necessary. But DDR is ideal for studies of abstract constructs like emotions, that refer to the general gist of a text rather than particular words. The rich representations of word embeddings allow DDR to capture even the subtlest associations between words and constructs, and to precisely reflect the _extent_ to which the words are associated with that construct. It can do this even for texts that do not contain any dictionary words. Because embeddings are continuous and already calibrated to the probabilities of word use in language, DDR also avoids the difficult statistical problems that arise due to the strange distributions of word counts (@sec-word-counting-improvements).\n\n@garten_etal_2018 found that DDR works best with smaller dictionaries of only the words most directly connected to the construct being measured (around 30 words worked best in their experiments). The diminished effectiveness of longer dictionaries is likely due to the properties of word embeddings---while the _direction_ of a word embedding represents its meaning (i.e. its average context), the _magnitude_ of a word embedding (i.e. how far it would move another vector if the two were added together) represents how specific it is to that context (@sec-embedding-magnitude). This is why an accurate embedding of a full text can be obtained by averaging the embeddings of each of its words---the embeddings automatically devalue frequent and uninformative words, and emphasize the words that are representative of the text's specific meaning [@ethayarajh_etal_2019]. Overvaluing informative words is a desirable property for raw texts, in which uninformative words tend to be very frequent. But dictionaries only include one of each word. In longer dictionaries with more infrequent, tangentially connected words, averaging word embeddings will therefore _overvalue_ those infrequent words and skew the DDR. This can be fixed with Garten et al.'s method of picking out only the most informative words. Alternatively, it could be fixed by measuring the frequency of each dictionary word in a corpus and weighting the average embedding by that frequency. This method is actually more consistent with the way most dictionaries are validated, by counting the frequencies of dictionary words in text (@sec-word-counting).\n\n[^ddr-1]: For more information on this property, see our [footnote](decontextualized-embeddings.html#fn7) in @sec-word2vec. Note that this property emerges naturally from the way decontextualized models like word2vec and GloVe are trained, and therefore may not hold true for contextualized embeddings.\n\nLet's measure surprise in the Hippocorpus texts by computing a DDR of the NRC Word-Emotion Association Lexicon [@mohammad_turney_2010; @mohammad_turney_2013] which we used in @sec-word-counting. To correct for word informativeness, we will weight the dictionary word embeddings by their frequency in the corpus.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load surprise dictionary\nsurprise_dict <- quanteda.sentiment::data_dictionary_NRC[\"surprise\"]\n\n# estimate frequency of dictionary words\nsurprise_dict_freqs <- hippocorpus_dfm |> \n  dfm_keep(surprise_dict$surprise) |> \n  quanteda.textstats::textstat_frequency() |> \n  select(feature, frequency)\n\n# word2vec embeddings of dictionary words\nsurprise_ddr <- predict(word2vec_mod, surprise_dict$surprise, type = \"embedding\") |> \n  as_tibble(rownames = \"feature\") |> \n  left_join(surprise_dict_freqs) |> \n  replace_na(list(frequency = 0))\n\n# average dictionary embedding (weighted by frequency)\nsurprise_ddr <- surprise_ddr |> \n  summarise(across(V1:V300, ~weighted.mean(.x, frequency))) |> \n  select(V1:V300) |> \n  unlist()\n\n# document embeddings\nhippocorpus_word2vec <- hippocorpus_dfm |> \n  textstat_embedding(word2vec_mod)\n\n# score documents by surprise\nhippocorpus_surprise_ddr <- hippocorpus_word2vec |> \n  rowwise() |> \n  mutate(\n    surprise = cos_sim(c_across(V1:V300), surprise_ddr),\n    # transform cosine similarity to stay between 0 and 1\n    surprise = surprise/2 + 1/2\n  ) |> \n  ungroup() |> \n  select(-c(V1:V300))\n\n# rejoin docvars\nhippocorpus_surprise_ddr <- hippocorpus_surprise_ddr |> \n  bind_cols(docvars(hippocorpus_corp))\n```\n:::\n\n\nWith the new measure of surprise, we can retest the hypothesis that true autobiographical stories include more surprise than imagined stories. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# logistic regression\nsurprise_mod_ddr <- glm(\n  surprise ~ memType, \n  family = binomial,\n  hippocorpus_surprise_ddr\n  )\n\nsummary(surprise_mod_ddr)\n```\n\n<pre class=\"r-output\"><code>#> \n#> Call:\n#> glm(formula = surprise ~ memType, family = binomial, data = hippocorpus_surprise_ddr)\n#> \n#> Coefficients:\n#>                 Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept)      1.81235    0.05484  33.049   <2e-16 ***\n#> memTyperecalled -0.02041    0.07711  -0.265    0.791    \n#> memTyperetold   -0.02250    0.09587  -0.235    0.814    \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for binomial family taken to be 1)\n#> \n#>     Null deviance: 6.9881  on 6853  degrees of freedom\n#> Residual deviance: 6.8986  on 6851  degrees of freedom\n#> AIC: 2103.6\n#> \n#> Number of Fisher Scoring iterations: 5\n</code></pre>\n:::\n\n\nWe again find no significant difference in surprise between remembered and recalled stories. This is consistent with our results from @sec-word-counting, where we tested the same hypothesis with the same dictionary, but used word counts rather than embeddings.\n\n#### DDR For Word-by-Word Analysis\n\nAnother advantage of DDR over dictionary-based word counts is that DDR enables word-by-word analysis of text. It is not very informative to count how many surprise words are in each word (it will either be one or zero), but we can compare the embedding of each word to the surprise DDR. This allows us to see how a construct spreads out within a single text. As an example, let's take a single story from the Hippocorpus:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# full text as string\nstory <- word(hippocorpus_df$story[3], end = 140L)\n\ncat(story)\n```\n\n<pre class=\"r-output\"><code>#> It seems just like yesterday but today makes five months ago it happened. I had been watching my phone like an owl for the past week. I was waiting for a work related call that my team was waiting for to close a important deal. It wasnt the call I expected though. It was for  my sister was in labor with the twins. My sister is only 7 months pregnant. I got the call shortly after arriving at work. Just as fast I was back out the door and on my way to the hospital. When I arrived my sister had just delivered and I just was in awe. Even though they were a bit small they were mighty. They were the most precious things I had ever seen. I held my niece and nephew and couldnt stop crying.\n</code></pre>\n:::\n\n\nTo visualize surprise within this text, we can separate it into words and find the embedding of each word. Rather than averaging all of these embeddings together to get the embedding of the full text, we can compute a rolling average, averaging each word's embedding with those of its neighbors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# separate into vector of tokens\nstory <- word(hippocorpus_df$story[3], end = 140L) |> \n  tokens() |> as.character()\n  \n# rolling average of embeddings\nstory_surprise <- as_tibble(predict(word2vec_mod, story, type = \"embedding\")) |> \n  mutate(\n    across(\n      V1:V300, \n      ~zoo::rollapply(\n        .x, 4, mean, na.rm = TRUE, \n        align = \"center\",\n        fill = c(head(.x, 1), NA, tail(.x, 1))\n        )\n      )\n    )\n  \n# vector of computed surprise (cosine similarity)\nstory_surprise <- story_surprise |> \n  rowwise() |> \n  mutate(surprise = cos_sim(c_across(V1:V300), surprise_ddr)) |> \n  pull(surprise)\n```\n:::\n\n\nWe can now visualize the surprise in each word of the text. Since `ggplot2` makes it difficult to plot dynamically colored text in one continuous chunk, we will use ANSI color codes to print the our text directly to the console.\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-wrap}\n# (see https://www.hackitu.de/termcolor256/ for info on ANSI colors)\n# blue-red heat scale\nansi_scale <- c(\n  063, 105, 147, 189, 188, 230, 223, \n  224, 217, 210, 203, 196, 160, 124\n  )\n\n# turn scale value into ANSI color code\nmap_to_ansi <- function(x, ansi_scale){\n  x_new <- (x - min(x, na.rm = TRUE))*(length(ansi_scale)/diff(range(x, na.rm = TRUE))) + 1\n  x_new\n  ansi_scale[round(x_new)]\n}\n\nstory_surprise <- map_to_ansi(story_surprise, ansi_scale)\n\n# print\nfor (i in 1:length(story_surprise)) {\n  if(is.na(story_surprise[i])){\n    cat(story[i], \" \")\n  }else{\n    cat(paste0(\"\\033[48;5;\", story_surprise[i], \"m\", story[i], \" \\033[0m\"))\n  }\n}\n```\n\n<pre class=\"r-output\"><code>#> <span style='background-color: #D7D7FF;'>It </span><span style='background-color: #AF0000;'>seems just </span>like  <span style='background-color: #FF5F5F;'>yesterday </span><span style='background-color: #FFD7D7;'>but </span><span style='background-color: #FF8787;'>today </span><span style='background-color: #D7D7D7;'>makes </span><span style='background-color: #D7D7FF;'>five </span><span style='background-color: #FFFFD7;'>months </span><span style='background-color: #FFAFAF;'>ago it </span><span style='background-color: #FF0000;'>happened </span><span style='background-color: #FF8787;'>. </span><span style='background-color: #FFD7AF;'>I </span><span style='background-color: #FF8787;'>had been watching </span><span style='background-color: #FF0000;'>my </span><span style='background-color: #FF8787;'>phone </span><span style='background-color: #FFD7D7;'>like </span><span style='background-color: #FFAFAF;'>an </span><span style='background-color: #D7D7D7;'>owl </span><span style='background-color: #FFFFD7;'>for the </span><span style='background-color: #D7D7D7;'>past </span><span style='background-color: #FFD7D7;'>week </span><span style='background-color: #FFAFAF;'>. </span><span style='background-color: #FF0000;'>I was </span><span style='background-color: #FFD7D7;'>waiting </span><span style='background-color: #FF8787;'>for </span><span style='background-color: #D7D7FF;'>a </span><span style='background-color: #AFAFFF;'>work </span><span style='background-color: #FFD7AF;'>related </span><span style='background-color: #FFAFAF;'>call </span><span style='background-color: #D70000;'>that </span><span style='background-color: #FF0000;'>my </span><span style='background-color: #D70000;'>team </span><span style='background-color: #FF8787;'>was </span><span style='background-color: #FFD7D7;'>waiting </span><span style='background-color: #FF8787;'>for </span><span style='background-color: #FFFFD7;'>to </span><span style='background-color: #FFD7D7;'>close </span><span style='background-color: #FF8787;'>a </span><span style='background-color: #FFD7D7;'>important </span><span style='background-color: #FF8787;'>deal </span><span style='background-color: #FFFFD7;'>. </span><span style='background-color: #FFD7D7;'>It wasnt </span><span style='background-color: #FF8787;'>the </span><span style='background-color: #FF5F5F;'>call </span><span style='background-color: #FF0000;'>I </span><span style='background-color: #FF5F5F;'>expected </span><span style='background-color: #FFAFAF;'>though . </span><span style='background-color: #FFD7AF;'>It </span><span style='background-color: #FF8787;'>was </span><span style='background-color: #FFAFAF;'>for my sister </span><span style='background-color: #FFFFD7;'>was </span><span style='background-color: #D7D7D7;'>in labor </span><span style='background-color: #FFD7AF;'>with the </span><span style='background-color: #FFD7D7;'>twins </span><span style='background-color: #D7D7D7;'>. My </span><span style='background-color: #FFD7D7;'>sister </span><span style='background-color: #FFFFD7;'>is only 7 </span><span style='background-color: #5F5FFF;'>months </span><span style='background-color: #FFD7AF;'>pregnant </span><span style='background-color: #FF0000;'>. </span><span style='background-color: #D70000;'>I got </span><span style='background-color: #FF5F5F;'>the </span><span style='background-color: #FFD7AF;'>call shortly </span><span style='background-color: #FFFFD7;'>after </span><span style='background-color: #FFAFAF;'>arriving </span><span style='background-color: #FFD7AF;'>at </span><span style='background-color: #FFD7D7;'>work . </span><span style='background-color: #FFD7AF;'>Just </span><span style='background-color: #FF8787;'>as fast </span><span style='background-color: #FF0000;'>I </span><span style='background-color: #FF5F5F;'>was </span><span style='background-color: #FF8787;'>back </span><span style='background-color: #FFD7D7;'>out </span><span style='background-color: #FFFFD7;'>the </span><span style='background-color: #D7D7FF;'>door </span><span style='background-color: #FFFFD7;'>and </span><span style='background-color: #FF8787;'>on my </span><span style='background-color: #FF5F5F;'>way </span><span style='background-color: #FF8787;'>to </span><span style='background-color: #D7D7D7;'>the </span><span style='background-color: #FFD7AF;'>hospital </span><span style='background-color: #FFAFAF;'>. </span><span style='background-color: #FF5F5F;'>When </span><span style='background-color: #FF0000;'>I </span><span style='background-color: #FF5F5F;'>arrived </span><span style='background-color: #FF8787;'>my </span><span style='background-color: #D70000;'>sister </span><span style='background-color: #FF5F5F;'>had </span><span style='background-color: #FF8787;'>just </span><span style='background-color: #FF0000;'>delivered and </span><span style='background-color: #D70000;'>I just was </span><span style='background-color: #FFAFAF;'>in awe . Even </span><span style='background-color: #FFD7D7;'>though they </span><span style='background-color: #FFAFAF;'>were </span><span style='background-color: #FFD7D7;'>a </span><span style='background-color: #FF5F5F;'>bit </span><span style='background-color: #FF8787;'>small </span><span style='background-color: #FFD7D7;'>they were </span><span style='background-color: #FFFFD7;'>mighty . </span><span style='background-color: #D7D7D7;'>They </span><span style='background-color: #FFFFD7;'>were </span><span style='background-color: #FFD7AF;'>the </span><span style='background-color: #FF5F5F;'>most </span><span style='background-color: #FF0000;'>precious </span><span style='background-color: #AF0000;'>things </span><span style='background-color: #FF0000;'>I </span><span style='background-color: #FFAFAF;'>had </span><span style='background-color: #FFFFD7;'>ever </span><span style='background-color: #FFD7D7;'>seen </span><span style='background-color: #FFD7AF;'>. </span><span style='background-color: #FFD7D7;'>I </span><span style='background-color: #FF8787;'>held </span><span style='background-color: #FFD7AF;'>my </span><span style='background-color: #FFFFD7;'>niece </span><span style='background-color: #8787FF;'>and </span><span style='background-color: #D7D7D7;'>nephew </span><span style='background-color: #FFD7AF;'>and </span><span style='background-color: #FFAFAF;'>couldnt stop </span>crying  .\n</code></pre>\n:::\n\n\n::: {.callout-tip icon=\"false\"}\n## Advantages of DDR\n\n-   **Richer, More Robust Construct Representation Than Word Counting**\n-   **Avoids Statistical Problems With Word Count Distributions**\n-   **Enables Word-by-Word Analysis**\n:::\n\n::: {.callout-important icon=\"false\"}\n## Disadvantages of DDR\n\n-   **Can Implicitly Encode Associated Constructs:** For example, if surprised texts tend to have positive valence in the data used to train the word embedding model, the DDR for surprise may embed some positive valence as well. This can be remedied by constructing a DDR for positive valence as well, and using it as a statistical control when testing hypotheses.\n-   **May Not Work With Contextualized Embeddings:** Even if we assume that contextualized embeddings conform to the geometrical properties associated with word embeddings, LLMs are not designed to embed single words, which is required for DDR.\n-   **Not Appropriate for Linguistic Measures:** Word embeddings encode the general gist of a text, whereas constructs like passive voice or pronoun use refer to specific words.\n:::\n\n### Contextualized Construct Representation (CCR)\n\nDictionaries are not the only validated psychological measures that we can apply using embeddings. With contextualized embeddings, we can extract the gist of any text and compare it to that of any other text. @atari_etal_2023 propose to do this with the most popular form of psychometric scale: the questionnaire. Psychologists have been using questionnaires to measure things for over a century, and tens of thousands of validated questionnaires are now available [online](https://www.apa.org/pubs/databases/psyctests). The LLM embedding of a questionnaire is referred to as a Contextualized Construct Representation (CCR).\n\nWe can use CCR to measure surprise in the Hippocorpus texts. For our questionnaire, we will use an adapted version of the surprise scale used in @choi_choi_2010 and @choi_nisbett_2000.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurprise_items <- c(\n  \"I was extremely surprised by the outcome of the event.\",\n  \"The outcome of the event was extremely interesting.\",\n  \"The outcome of the event was extremely new.\"\n  )\n```\n:::\n\n\n::: {.callout-important}\n## Beware of Reverse Coding!\n\nMany questionnaires include reverse-coded items (e.g. \"I often feel happy\" on a depression questionnaire). The easiest way to deal with these is to manually add negations to flip their meaning (e.g. \"I _do not_ often feel happy\"). \n:::\n\nThe first step in using CCR is to compute contextualized embeddings for the texts in our dataset. We already did this in @sec-contextualized-embeddings. The next step is to compute contextualized embeddings for the items in the questionnaire, and average them to produce a CCR.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# embed items (using the same model as we used before)\nlibrary(text)\n  \nsurprise_sbert <- textEmbed(\n  surprise_items,\n  model = \"sentence-transformers/all-MiniLM-L12-v2\", # model name\n  layers = -2,  # second to last layer (default)\n  tokens_select = \"[CLS]\", # use only [CLS] token\n  dim_name = FALSE,\n  keep_token_embeddings = FALSE\n  )\n\n# compute CCR by averaging item embeddings\nsurprise_ccr <- surprise_sbert$texts[[1]] |>\n  summarise(across(everything(), mean)) |> \n  unlist()\n```\n:::\n\n\nWe can now measure surprise in the Hippocorpus texts by computing the cosine similarity between their embeddings and the surprise CCR.^[Cosine similarity is appropriate here because our contextualized embeddings were generated by an SBERT model which was designed to be used with cosine similarity. If we had used another model such as RoBERTa, Euclidean distance might be more appropriate.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# score documents by surprise\nhippocorpus_surprise_ccr <- hippocorpus_sbert |> \n  rowwise() |> \n  mutate(\n    surprise = cos_sim(c_across(Dim1:Dim384), surprise_ccr),\n    # transform cosine similarity to stay between 0 and 1\n    surprise = surprise/2 + 1/2\n  ) |> \n  ungroup() |> \n  select(-c(Dim1:Dim384))\n\n# logistic regression\nsurprise_mod_ccr <- glm(\n  surprise ~ memType, \n  family = binomial,\n  hippocorpus_surprise_ccr\n  )\n\nsummary(surprise_mod_ccr)\n```\n\n<pre class=\"r-output\"><code>#> \n#> Call:\n#> glm(formula = surprise ~ memType, family = binomial, data = hippocorpus_surprise_ccr)\n#> \n#> Coefficients:\n#>                 Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept)      5.63709    0.32025  17.602   <2e-16 ***\n#> memTyperecalled -0.02168    0.44955  -0.048    0.962    \n#> memTyperetold   -0.02781    0.55768  -0.050    0.960    \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for binomial family taken to be 1)\n#> \n#>     Null deviance: 0.57625  on 6853  degrees of freedom\n#> Residual deviance: 0.57283  on 6851  degrees of freedom\n#> AIC: 55.455\n#> \n#> Number of Fisher Scoring iterations: 9\n</code></pre>\n:::\n\n\nOnce again we find no significant difference in surprise between remembered and recalled stories. Don't take this result too seriously though, since CCR has a fundamental problem that needs to be addressed.\n\nEmbeddings capture the overall \"vibes\" of a text, including its tone and dialect. With CCR, we are comparing the \"vibes\" of a questionnaire written by academics to the \"vibes\" of narratives written by Hippocorpus participants. By comparing these vectors, we are not just measuring how much surprise is in each text---we are also measuring the extent to which each text is written in the style of a questionnaire written by academics. This introduces a confounding variable into our analysis---questionnaire-ness.\n\nHow can we be sure that we are measuring surprise and not questionnaire-ness? We can't, but there are some methods that might help. We will explore these in @sec-ccr-improvement and @sec-dimension-projection. \n\n::: {.callout-tip icon=\"false\"}\n## Advantages of CCR\n\n-   ****\n:::\n\n::: {.callout-important icon=\"false\"}\n## Disadvantages of CCR\n\n-   ****\n:::\n\n### Correlational Methods\n\ni.e. averaging from group in training set\n\n\n::: {.cell}\n\n:::\n\n\n## Reasoning in Vector Space: Beyond Cosine Similarity\n\n### Parallelograms {#sec-parallelograms}\n\nIntroduced with word2vec by @mikolov_etal_2013\n\nGlove [@pennington_etal_2014] is designed with this property in mind. Transformer models are not.\n\n- Transformer models, including BERT, tend to generate embedding spaces that do not center at zero and which tend to form a narrow cone in the vector space [@ethayarajh_2019; @gao_etal_2019]\n  - in BERT, token embeddings in the same sentence become more dissimilar to each other in upper layers but are still more similar than randomly sampled words are on average\n  - BERT aggregated text embeddings perform worse than word2vec and GloVe when analyzed using cosine similarity [@reimers_gurevych_2019], though averaging the embeddings from the last two layers of BERT can improve this [@li_etal_2020]\n  \n  static embeddings created by taking the first principal component of a word’s contextualized representations out- perform GloVe and FastText embeddings on many word vector benchmarks [@ethayarajh_2019]\n\n\n::: {.cell}\n\n:::\n\n\n#### Improving CCR With Geometric Reasoning {#sec-ccr-improvement}\n\nIn CCR, for example, there’s a difference between agreeing with statements in a questionnaire and actually writing like a questionnaire. How do I know that I’m measuring how anxious/depressed the comments are and not how questionnaire-y they are?\nPotential workaround: reverse all of the statements in the questionnaire (as for reverse-coded items), add them to the original questionnaire, and get the average embedding of the construct-neutral questionnaire. Then subtract this embedding from the original questionnaire average embedding.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurprise_items_pos <- c(\n  \"I was extremely surprised by the outcome of the event.\",\n  \"The outcome of the event was extremely interesting.\",\n  \"The outcome of the event was extremely new.\"\n  )\n\nsurprise_items_neg <- c(\n  \"I was not surprised at all by the outcome of the event.\",\n  \"The outcome of the event was not interesting at all.\",\n  \"The outcome of the event was not new at all.\"\n  )\n```\n:::\n\n\n### Advanced Similarity Measures {#sec-advanced-similarity}\n\n#### Dot Product\n\n#### Jaccard similarity\n\n#### Mutual Information\n\n#### Jensen–Shannon divergence\n\n### Semantic Projection {#sec-dimension-projection}\n\n@grand_etal_2022\n\n#### Improving CCR With Semantic Projection\n\n**An example of using dimension projection and CCR in research:** @simchon_etal_2023 collected 10,000 messages from the [r/depression](https://www.reddit.com/r/depression) subreddit, along with a control group of 100 messages each from 100 randomly selected subreddits. They then used a variant of SBERT, `all-MiniLM-L6-v2` (see @sec-contextualized-embeddings), to compute CCR embeddings of a psychological questionnaire measuring \"locus of control,\" the feeling that you have control over your own life. The questionnaire included items measuring an internal locus of control (\"I have control\"), and items measuring an external locus of control (\"External forces have control\"). Simchon et al. constructed an anchored vector to capture the direction between internal and external locus of control, and projected embeddings of the Reddit posts onto that vector to measure how much each post reflected an internal vs. an external locus of control. They found that posts in r/depression exhibited a more external locus of control than posts in the control group.\n\n### Machine Learning Methods {#sec-machine-learning-methods}\n\n@kjell_etal_2022\n\n@chersoni_etal_2021 used partial least squares regression to map distributional embeddings to human-rated semantic features derived from research in cognitive psychology.\n\nSome research advises using both the `[CLS]` token and an aggregation of the other token embeddings [@lee_etal_2023]\n",
    "supporting": [
      "navigating-vectorspace_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}