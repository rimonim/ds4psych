{
  "hash": "6468f4c2e5c169775576d2748db9e67b",
  "result": {
    "engine": "knitr",
    "markdown": "# Word Embeddings {#sec-decontextualized-embeddings}\n\n\n\n\n\n## The Distributional Hypothesis\n\nThis textbook assumes that words have psychologically interesting content. For example, certain words are associated with surprise, while others may be associated with concrete thought. But what does it mean for a word to be associated with an emotion or a cognitive process? How do words come to have any meaning at all? One answer: People associate a word with surprise because they often hear it in surprising situations. Because people associate surprise-related words with surprising situations, they use those words more when they are thinking about surprising situations.\n\nSo teaching a computer to recognize surprise-related words should be simple, right? We'll just tell the computer to look for words that tend to appear in surprising situations! But there's a problem: Computers don't get surprised, and they have no idea what a surprising situation is.\n\nAccording to **the distributional hypothesis**, our problem is actually not a problem at all. The computer might not know what surprise is, but it doesn't need to. It doesn't need to know what anything *is*---it just needs to know how everything is related to everything else. To do this, it just needs to notice what appears next to what. **Similar words appear in similar contexts**. For example, consider the following two sentences from the paper that introduced the distributional hypothesis, @harris_1954 [emphasis added].\n\n> \"The formation of new *utterances* in the *language* is therefore based on the distributional relations as changeably perceived by the *speakers*-among the parts of the previously heard *utterances*.\"\n\n> \"The correlation between *language* and *meaning* is much greater when we consider connected discourse. \"\n\nEven if we have no idea what \"utterances\" or \"meaning\" are, we can learn from these sentences that they must be related somehow, since they both appear together with the word \"language.\" The more sentences we observe, the more sure we can be about the distributional patterns (i.e. which words tend to have similar words nearby). Words that tend to have very similar words nearby are likely to be similar in meaning, while words that have very different contexts are probably unrelated. Algorithms that learn the meanings of tokens (or at least the relations between their meanings) from these patterns of co-occurrence are called **Distributional Semantic Models (DSMs)**.\n\n::: callout-important\n## A Common Misconception\n\nTwo words are NOT considered similar based on whether they appear together often. Words are similar when they tend to appear in similar *contexts*. For example, \"fridge\" and \"refrigerator\" almost never appear together in the same sentence, but they do tend to appear next to similar groupings of other words (e.g. \"food,\" \"cold,\" etc.). LSA, the first DSM we will cover, does not fully address this difficulty.\n:::\n\nWhen DSMs learn how different meanings are related, they *embed* those meanings as vectors in a vector space, like this:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-74cfae68c7f2192b61f0\" style=\"width:100%;height:406px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-74cfae68c7f2192b61f0\">{\"x\":{\"visdat\":{\"a69c475d8a6b\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"a69c475d8a6b\",\"attrs\":{\"a69c475d8a6b\":{\"x\":{},\"y\":{},\"z\":{},\"split\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\",\"mode\":\"markers\",\"inherit\":true},\"a69c475d8a6b.1\":{\"x\":{},\"y\":{},\"z\":{},\"split\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"text\":{},\"type\":\"scatter3d\",\"mode\":\"text\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"zerolinecolor\":\"black\",\"zerolinewidth\":10},\"showlegend\":false,\"scene\":{\"xaxis\":{\"title\":\"V1\"},\"yaxis\":{\"title\":\"V2\"},\"zaxis\":{\"title\":\"V3\"}},\"hovermode\":\"closest\"},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[-0.36244642737218208],\"y\":[0.10336302253996849],\"z\":[0.25597161573536165],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"anxious\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"frame\":null},{\"x\":[-0.20048952208304843],\"y\":[-0.47953728220530528],\"z\":[0.17349679604121063],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"bipolar\",\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"frame\":null},{\"x\":[-0.2941103607640555],\"y\":[-0.32239881317784785],\"z\":[-0.048332237519831373],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"depressed\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"line\":{\"color\":\"rgba(44,160,44,1)\"},\"frame\":null},{\"x\":[-0.17512175552802359],\"y\":[-0.52372372216682617],\"z\":[0.00144812308620342],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"depression\",\"marker\":{\"color\":\"rgba(214,39,40,1)\",\"line\":{\"color\":\"rgba(214,39,40,1)\"}},\"error_y\":{\"color\":\"rgba(214,39,40,1)\"},\"error_x\":{\"color\":\"rgba(214,39,40,1)\"},\"line\":{\"color\":\"rgba(214,39,40,1)\"},\"frame\":null},{\"x\":[-0.33556477252597477],\"y\":[0.28466715970390993],\"z\":[0.11705857260170072],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"ecstatic\",\"marker\":{\"color\":\"rgba(148,103,189,1)\",\"line\":{\"color\":\"rgba(148,103,189,1)\"}},\"error_y\":{\"color\":\"rgba(148,103,189,1)\"},\"error_x\":{\"color\":\"rgba(148,103,189,1)\"},\"line\":{\"color\":\"rgba(148,103,189,1)\"},\"frame\":null},{\"x\":[-0.25800397430043442],\"y\":[0.17085988251017903],\"z\":[0.018085744349629361],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"furious\",\"marker\":{\"color\":\"rgba(140,86,75,1)\",\"line\":{\"color\":\"rgba(140,86,75,1)\"}},\"error_y\":{\"color\":\"rgba(140,86,75,1)\"},\"error_x\":{\"color\":\"rgba(140,86,75,1)\"},\"line\":{\"color\":\"rgba(140,86,75,1)\"},\"frame\":null},{\"x\":[-0.35662778297930486],\"y\":[0.24864288333445073],\"z\":[-0.15556890791135303],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"happy\",\"marker\":{\"color\":\"rgba(227,119,194,1)\",\"line\":{\"color\":\"rgba(227,119,194,1)\"}},\"error_y\":{\"color\":\"rgba(227,119,194,1)\"},\"error_x\":{\"color\":\"rgba(227,119,194,1)\"},\"line\":{\"color\":\"rgba(227,119,194,1)\"},\"frame\":null},{\"x\":[-0.23824421903029769],\"y\":[-0.33801464236487944],\"z\":[0.098017196040503476],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"manic\",\"marker\":{\"color\":\"rgba(127,127,127,1)\",\"line\":{\"color\":\"rgba(127,127,127,1)\"}},\"error_y\":{\"color\":\"rgba(127,127,127,1)\"},\"error_x\":{\"color\":\"rgba(127,127,127,1)\"},\"line\":{\"color\":\"rgba(127,127,127,1)\"},\"frame\":null},{\"x\":[-0.25833691215071303],\"y\":[-0.082676817325885887],\"z\":[-0.61130043718229221],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"miserable\",\"marker\":{\"color\":\"rgba(188,189,34,1)\",\"line\":{\"color\":\"rgba(188,189,34,1)\"}},\"error_y\":{\"color\":\"rgba(188,189,34,1)\"},\"error_x\":{\"color\":\"rgba(188,189,34,1)\"},\"line\":{\"color\":\"rgba(188,189,34,1)\"},\"frame\":null},{\"x\":[-0.31811862929474299],\"y\":[0.029525786135739088],\"z\":[0.40714832020454939],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"nervous\",\"marker\":{\"color\":\"rgba(23,190,207,1)\",\"line\":{\"color\":\"rgba(23,190,207,1)\"}},\"error_y\":{\"color\":\"rgba(23,190,207,1)\"},\"error_x\":{\"color\":\"rgba(23,190,207,1)\"},\"line\":{\"color\":\"rgba(23,190,207,1)\"},\"frame\":null},{\"x\":[-0.29495531382524232],\"y\":[0.075698027439194446],\"z\":[-0.52727865357457815],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"sad\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"frame\":null},{\"x\":[-0.30531703982103131],\"y\":[0.28528837334936841],\"z\":[0.19162378349372311],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"surprised\",\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"frame\":null},{\"x\":[-0.36244642737218208],\"y\":[0.10336302253996849],\"z\":[0.25597161573536165],\"text\":\"anxious\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"anxious\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"line\":{\"color\":\"rgba(44,160,44,1)\"},\"frame\":null},{\"x\":[-0.20048952208304843],\"y\":[-0.47953728220530528],\"z\":[0.17349679604121063],\"text\":\"bipolar\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"bipolar\",\"marker\":{\"color\":\"rgba(214,39,40,1)\",\"line\":{\"color\":\"rgba(214,39,40,1)\"}},\"error_y\":{\"color\":\"rgba(214,39,40,1)\"},\"error_x\":{\"color\":\"rgba(214,39,40,1)\"},\"line\":{\"color\":\"rgba(214,39,40,1)\"},\"frame\":null},{\"x\":[-0.2941103607640555],\"y\":[-0.32239881317784785],\"z\":[-0.048332237519831373],\"text\":\"depressed\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"depressed\",\"marker\":{\"color\":\"rgba(148,103,189,1)\",\"line\":{\"color\":\"rgba(148,103,189,1)\"}},\"error_y\":{\"color\":\"rgba(148,103,189,1)\"},\"error_x\":{\"color\":\"rgba(148,103,189,1)\"},\"line\":{\"color\":\"rgba(148,103,189,1)\"},\"frame\":null},{\"x\":[-0.17512175552802359],\"y\":[-0.52372372216682617],\"z\":[0.00144812308620342],\"text\":\"depression\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"depression\",\"marker\":{\"color\":\"rgba(140,86,75,1)\",\"line\":{\"color\":\"rgba(140,86,75,1)\"}},\"error_y\":{\"color\":\"rgba(140,86,75,1)\"},\"error_x\":{\"color\":\"rgba(140,86,75,1)\"},\"line\":{\"color\":\"rgba(140,86,75,1)\"},\"frame\":null},{\"x\":[-0.33556477252597477],\"y\":[0.28466715970390993],\"z\":[0.11705857260170072],\"text\":\"ecstatic\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"ecstatic\",\"marker\":{\"color\":\"rgba(227,119,194,1)\",\"line\":{\"color\":\"rgba(227,119,194,1)\"}},\"error_y\":{\"color\":\"rgba(227,119,194,1)\"},\"error_x\":{\"color\":\"rgba(227,119,194,1)\"},\"line\":{\"color\":\"rgba(227,119,194,1)\"},\"frame\":null},{\"x\":[-0.25800397430043442],\"y\":[0.17085988251017903],\"z\":[0.018085744349629361],\"text\":\"furious\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"furious\",\"marker\":{\"color\":\"rgba(127,127,127,1)\",\"line\":{\"color\":\"rgba(127,127,127,1)\"}},\"error_y\":{\"color\":\"rgba(127,127,127,1)\"},\"error_x\":{\"color\":\"rgba(127,127,127,1)\"},\"line\":{\"color\":\"rgba(127,127,127,1)\"},\"frame\":null},{\"x\":[-0.35662778297930486],\"y\":[0.24864288333445073],\"z\":[-0.15556890791135303],\"text\":\"happy\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"happy\",\"marker\":{\"color\":\"rgba(188,189,34,1)\",\"line\":{\"color\":\"rgba(188,189,34,1)\"}},\"error_y\":{\"color\":\"rgba(188,189,34,1)\"},\"error_x\":{\"color\":\"rgba(188,189,34,1)\"},\"line\":{\"color\":\"rgba(188,189,34,1)\"},\"frame\":null},{\"x\":[-0.23824421903029769],\"y\":[-0.33801464236487944],\"z\":[0.098017196040503476],\"text\":\"manic\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"manic\",\"marker\":{\"color\":\"rgba(23,190,207,1)\",\"line\":{\"color\":\"rgba(23,190,207,1)\"}},\"error_y\":{\"color\":\"rgba(23,190,207,1)\"},\"error_x\":{\"color\":\"rgba(23,190,207,1)\"},\"line\":{\"color\":\"rgba(23,190,207,1)\"},\"frame\":null},{\"x\":[-0.25833691215071303],\"y\":[-0.082676817325885887],\"z\":[-0.61130043718229221],\"text\":\"miserable\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"miserable\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"frame\":null},{\"x\":[-0.31811862929474299],\"y\":[0.029525786135739088],\"z\":[0.40714832020454939],\"text\":\"nervous\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"nervous\",\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"frame\":null},{\"x\":[-0.29495531382524232],\"y\":[0.075698027439194446],\"z\":[-0.52727865357457815],\"text\":\"sad\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"sad\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"line\":{\"color\":\"rgba(44,160,44,1)\"},\"frame\":null},{\"x\":[-0.30531703982103131],\"y\":[0.28528837334936841],\"z\":[0.19162378349372311],\"text\":\"surprised\",\"type\":\"scatter3d\",\"mode\":\"text\",\"name\":\"surprised\",\"marker\":{\"color\":\"rgba(214,39,40,1)\",\"line\":{\"color\":\"rgba(214,39,40,1)\"}},\"error_y\":{\"color\":\"rgba(214,39,40,1)\"},\"error_x\":{\"color\":\"rgba(214,39,40,1)\"},\"line\":{\"color\":\"rgba(214,39,40,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nNow that you are comfortable with the concept of a word vector space (@sec-vectorspace-intro), let's look at how different DSMs embed words and documents into them.\n\n## LSA {#sec-lsa}\n\nLatent Semantic Analysis (LSA) is the simplest sort of DSM.^[LSA was first introduced by @deerwester_etal_1990.] You can think of it as the linear regression of the embeddings world. In its standard form, LSA is a simple dimensionality reduction technique---singular-value decomposition (SVD)---applied to the DFM. To illustrate what this means, let's start with a DFM describing the 862 posts on Reddit's r/relationship_advice that are featured on the cover of this book. For the sake of illustration, we'll only consider two features of this DFM: the words \"I\" and \"me\". \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Document-feature matrix of: 868 documents, 2 features (3.17% sparse) and 7 docvars.\n#>        features\n#> docs     i me\n#>   post1 38  7\n#>   post2 28 18\n#>   post3 17  7\n#>   post4  9  5\n#>   post5 17  2\n#>   post6 24 13\n#> [ reached max_ndoc ... 862 more documents ]\n```\n\n\n:::\n:::\n\n\nSince we're only considering two features, we can visualize this DFM in two dimensions:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](decontextualized-embeddings_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\nThe terms \"I\" and \"me\" are strongly correlated with each other. LSA will recognize this and summarize the I/me-ness of each document with a single number, a combination of the two variables. How does it find this single number? \n\nIt finds the line of best fit that goes through through the origin (0,0)---the line along which the variables stretch out the most. The direction of that I/me summary line becomes the first dimension of the new embedding space. So each post's score for this new dimension (i.e. the first number in its embedding vector) represents how far each point is along the direction of the summary line. In the following visualization, each point is projected down onto the summary line. You can see how this squishes the two dimensions of \"I\" and \"me\" so that each post can be measured simply by how far it is along the summary line:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](decontextualized-embeddings_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\nIn this simple example, we started with two dimensions (\"I\" and \"me\") and reduced them to one. Our new one-dimensional document embeddings measure how far the document is along the line drawn by the LSA.^[The scale in Step 3 above has been modified for clarity. In reality, the values of LSA embeddings may be scaled down or flipped relative to the original word counts. Since reasoning in vector space relies on relative distances and angles, this change of scale has no effect on measurements.]\n\nIf we wanted a second dimension for the embedding space (which would be silly in this example since we only have two dimensions overall), LSA would draw a second line perpendicular to the first---the line of best fit to the spread not accounted for by the first line. In real applications, of course, we'll want to use tens of thousands of features, not two. And the embedding vectors we make might be hundreds of dimensions, not one. Nevertheless, the concept remains the same: Lines through the origin are found that best explain the variance between the documents (note that these lines will all be perpendicular to each other). These lines become the new dimensions: The embedding of a document describes the projection of that document point onto each line.\n\nAs part of the process of producing an embedding for each document, LSA also produces an embedding for each _word_. In the simple example above, the new one-dimensional _word embeddings_ of \"I\" and \"me\" measure how much influence each word has on the summary line from Step 2. In other words, the embedding of \"me\" is the rise of the line along the y axis, and the embedding of \"I\" is the run of the line along the x axis. This is equivalent to asking how much I/me-ness is in \"I\" or how much I/me-ness is in \"me.\" In a real application with higher dimensional embeddings, the concept remains the same: The LSA embedding of a word describes the weights of that word count on each successive line of best fit.^[LSA document embeddings are sometimes explained as the sum of LSA word embeddings for each document. Mathematically, this is equivalent to the explanation provided here.]\n\nPerforming LSA on a training dataset is made easy with the `textmodel_lsa()` function from the [`quanteda.textmodels`](https://github.com/quanteda/quanteda.textmodels) package. Let's try it on the full DFM from the r/relationship_advice posts, with all 14,897 features instead of just \"I\" and \"me\". \n\nWe'll use `nd = 100` to reduce these 14,897 dimensions into an embedding space of just 100 dimensions. Why 100 dimensions? Choosing the right dimensionality for LSA can be tricky---too many dimensions make the vector space noisy, but too few dimensions can miss important nuances in meaning. Of course, the larger the training dataset, the more dimensions you can use without overfitting. Notice that the process of finding the line of best fit, and then the next best line perpendicular to the first (and then the next best line perpendicular to both, etc.) guarantees that the first dimensions of the LSA vectors will be the most important ones, and the later ones will be more likely to reflect random noise in the data. 100 or 150 dimensions are popular choices for sufficiently large training sets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quanteda.textmodels)\n\nra_posts_lsa <- ra_posts_dfm |> \n  textmodel_lsa(nd = 100, margin = \"both\")\n```\n:::\n\n\nNow that the model is set up, we can access the word embeddings with `ra_posts_lsa$features` and the document embeddings with `ra_posts_lsa$docs`. For example, the embedding of the word \"surprised\" would be `ra_posts_lsa$features[\"surprised\",]` and the embedding of the first post in the dataset would be `ra_posts_lsa$docs[\"post1\",]`. We could also look for the words closest in meaning to the word \"surprised\" by measuring their cosine similarity with the \"surprised\" embedding (see @sec-cosine-similarity).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurprise_embedding <- ra_posts_lsa$features[\"surprised\",]\n\n# cosine similarity function\ncos_sim <- function(x, y){\n  dot <- x %*% y\n  normx <- sqrt(sum(x^2))\n  normy <- sqrt(sum(y^2))\n  as.vector( dot / (normx*normy) )\n}\n\n# measure cosine similarity of each vector to \"surprised\"\nsurprise_words <- ra_posts_lsa$features |> \n  as_tibble(rownames = NA) |> \n  rownames_to_column(\"token\") |> \n  rowwise() |> \n  mutate(\n    surprise = cos_sim(c_across(V1:V100), surprise_embedding)\n  ) |> \n  ungroup()\n\n# find the ten closest words to \"surprised\"\nsurprise_words |> \n  arrange(desc(surprise)) |> \n  slice_head(n = 10) |> \n  pull(token)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] \"surprised\" \"peanut\"    \"besides\"   \"child's\"   \"woah\"      \"brick\"    \n#>  [7] \"cases\"     \"oil\"       \"insulin\"   \"trolling\"\n```\n\n\n:::\n:::\n\n\nSome of these are a bit strange---probably we would get better results with a larger dataset---but \"woah\" and \"trolling\" do sound pretty surprising. It seems likely that \"peanut\", \"cases\", \"oil\", and \"insulin\" were learned from posts about surprising allergy incidents.\n\nWe can also apply the embeddings learned on the r/relationship_advice posts to the now-familiar Hippocorpus data, and use the new surprise scores to retest the hypothesis that true autobiographical stories include more surprise than imagined stories. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reformat hippocorpus_dfm to match ra_posts_dfm\nhippocorpus_dfm <- hippocorpus_dfm |> \n  dfm_match(featnames(ra_posts_dfm))\n\n# apply LSA model to Hippocorpus data\nhippocorpus_lsa <- predict(ra_posts_lsa, hippocorpus_dfm)\n\n# measure surprise in Hippocorpus \n# (similarity to the word \"surprised\")\nhippocorpus_surprise <- hippocorpus_lsa$docs |> \n  as.matrix() |> \n  as_tibble(rownames = NA) |> \n  rownames_to_column(\"doc_id\") |> \n  rowwise() |> \n  mutate(\n    surprise = cos_sim(c_across(V1:V100), surprise_embedding)\n    ) |> \n  ungroup()\n```\n:::\n\n\nSince cosine similarity can only be between -1 and 1 (@sec-cosine-similarity), linear regression is an inappropriate statistical model. Instead, we will use logistic regression. This requires us to transform the cosine similarity to range between 0 and 1 before modeling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# transform cosine similarity to stay between 0 and 1\nhippocorpus_surprise <- hippocorpus_surprise |> \n  mutate(surprise = surprise/2 + 1/2)\n\n# rejoin docvars\nhippocorpus_surprise <- hippocorpus_surprise |> \n  bind_cols(docvars(hippocorpus_corp))\n\n# logistic regression\nsurprise_mod_lsa <- glm(\n  surprise ~ memType, \n  hippocorpus_surprise, \n  family = binomial\n  )\n\nsummary(surprise_mod_lsa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> glm(formula = surprise ~ memType, family = binomial, data = hippocorpus_surprise)\n#> \n#> Coefficients:\n#>                 Estimate Std. Error z value Pr(>|z|)  \n#> (Intercept)      0.07895    0.03813   2.071   0.0384 *\n#> memTyperecalled  0.02326    0.05382   0.432   0.6656  \n#> memTyperetold    0.03057    0.06705   0.456   0.6484  \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for binomial family taken to be 1)\n#> \n#>     Null deviance: 57.711  on 6853  degrees of freedom\n#> Residual deviance: 57.429  on 6851  degrees of freedom\n#> AIC: 9276\n#> \n#> Number of Fisher Scoring iterations: 3\n```\n\n\n:::\n:::\n\n\nWe found no significant difference in surprise between recalled and imagined stories, and no significant difference between retold and imagined stories.\n\n### Variations on LSA {#sec-lsa-variations}\n\nEven in the simplified example shown above using word counts for only \"I\" and \"me\", it is easy to see some problems with the standard LSA procedure. First, there is no guarantee that the line of best fit for describing the relationships between word counts will go through the origin. How can we fix this?\n\nStandard LSA is singular-value decomposition (SVD) applied to a DFM. If you are familiar with principle components analysis (PCA), the explanation of this process above may have sounded familiar. Indeed, PCA is almost the same as SVD, but with one added step at the beginning: centering all the variables at zero. This centering can make a big difference when the line of best fit to your data does not go through the origin. To center a DFM before performing LSA, you can use this function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfm_center <- function(dfm) {\n    new(\"dfmSparse\", as((t(apply(dfm, 1, function(x) (x - mean(x))))), \"dgCMatrix\"))\n}\n```\n:::\n\n\nAnother potential problem is that standard LSA gives more weight to common tokens, since common tokens tend to have more variance in their counts (remember that the line of best fit is the one along which the variables spread out the most). This can be remedied by normalizing the DFM before performing the LSA (i.e. transforming all of the counts to z-scores). To do this, you can use this function on your DFM:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfm_scale <- function(dfm) {\n    new(\"dfmSparse\", as((t(apply(dfm, 1, function(x) (x - mean(x)) / sd(x)))), \"dgCMatrix\"))\n}\n```\n:::\n\n\nTo gain an appreciation for these variations, let's see what LSA looks like on our \"I\" and \"me\" features with centering and normalization:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](decontextualized-embeddings_files/figure-html/unnamed-chunk-13-1.png){width=768}\n:::\n:::\n\n\nOther problems with LSA are familiar from @sec-word-counting-improvements: For example, LSA can only model linear relationships, but the relationships between word counts are not necessarily linear. In fact, the scatterplots above make it fairly clear that the relationship between the number of \"I\"s and the number of \"we\"s in a Reddit post is curved. Similarly, LSA (and SVD in general) works best with normally distributed data [see @rosario_2001], and word counts are anything but normally distributed. Also, standard LSA is sensitive to text length and may not generalize well to a dataset with texts that are much shorter or much longer than the training set. All of these problems can be remedied using the methods discussed in @sec-word-counting-improvements. For example, one might calculate TF-IDF scores (@sec-tfidf) before performing LSA to emphasize topical content. Alternatively, one might perform smoothing (@sec-smoothing) followed by relative tokenization (@sec-relative-tokenization) and the Anscombe transform (@sec-anscombe) to standardize word counts across text length and get them closer to a normal distribution. The original designers of LSA advocated for a transformation similar to TF-IDF which they justified in cognitive terms[^lsa-1] [@landauer_dumais_1997].\n\n[^lsa-1]: Cognitive scientists have long debated the extent to which the way DSMs learn meaning is similar to the way humans learn meaning. For an interesting recent paper in this field, see @kauf_etal_2024.\n\nAnother difficulty with LSA is that it relies on documents to define the context of words. This works well if each document only deals with one topic (or emotion), but not so well with documents that include multiple topics. One solution to this (if you have reasonably long texts) is to use a moving _context window_: Extract all segments of, say, 10 words, and use each one as a separate document for training the LSA. This can be accomplished in R by applying the following code to your texts before tokenization:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_texts <- c(\n  \"One solution to this is to use a moving context window\",\n  \"extracting all segments of, say, 10 words, and using each one as a separate document for training the LSA.\"\n  )\n\n# function to split text with moving window\nstr_split_window <- function(string, window_size){\n  nwords <- str_count(string, \" \") + 1L\n  out <- lapply(1:length(string), function(s) {\n    sapply((window_size + 1L):nwords[s], function(i) word(string[s], i-window_size, i))\n  })\n  unlist(out)\n}\n\nstr_split_window(example_texts, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] \"One solution to this is to use a moving context window\"       \n#>  [2] \"extracting all segments of, say, 10 words, and using each one\"\n#>  [3] \"all segments of, say, 10 words, and using each one as\"        \n#>  [4] \"segments of, say, 10 words, and using each one as a\"          \n#>  [5] \"of, say, 10 words, and using each one as a separate\"          \n#>  [6] \"say, 10 words, and using each one as a separate document\"     \n#>  [7] \"10 words, and using each one as a separate document for\"      \n#>  [8] \"words, and using each one as a separate document for training\"\n#>  [9] \"and using each one as a separate document for training the\"   \n#> [10] \"using each one as a separate document for training the LSA.\"\n```\n\n\n:::\n:::\n\n\n**An example of LSA in research:** @moss_etal_2006 asked mechanical engineering students to write brief descriptions of devices that were presented in diagrams. They then performed LSA on these descriptions, reducing them to a 100 dimensional embedding space. They then found the embeddings of an existing dictionary of function-related words (e.g. \"actuate\", \"adjust\", \"control\"), and averaged them to produce a vector representing the function of devices. Finally, they computed cosine similarity between this vector and that of each document. They found that fourth-year engineering students used more functional language than first-year students.\n\n::: {.callout-tip icon=\"false\"}\n## Advantages of LSA\n\n-   **Context-Based Model:** LSA captures the correlations between tokens in texts. This is an improvement on simple word counting methods that can miss subtle patterns in language use.\n-   **Simplicity:** Since many psychology researchers are familiar with PCA, LSA may feel like less of a black box than more modern methods.\n-   **Easy Integration With Transformations:** Since LSA is so straightforward, it is easy to integrate with methods from @sec-word-counting-improvements.\n:::\n\n::: {.callout-important icon=\"false\"}\n## Disadvantages of LSA\n\n-   **Assumes Linearity**\n-   **Works Best With Normal Distributions**\n-   **Relies on Documents as Context:** LSA works best when documents have only one topic each.\n-   **Prioritizes Common Words:** This can be fixed by adding a normalization step.\n:::\n\n## Advanced Word Embeddings {#sec-word-embeddings}\n\nLSA is a good baseline for word embeddings, but as we have seen, it suffers from many of the familiar problems associated with word counts: difficulties with nonlinear relationships, non-normal distributions, etc. \n\nLSA also suffers from an even more fundamental problem. Recall the warning from the beginning of this chapter: Two words are NOT considered similar based on whether they appear together often. Words are similar when they tend to appear in similar *contexts*. LSA is fundamentally based on global patterns of covariance in the DFM. Because synonyms rarely appear together in the same document (i.e. their counts are likely to be negatively correlated), their embeddings will be further apart in the vector space than they really should be. More modern techniques for embedding words fix this problem as well as the others with model architectures that are carefully tailored for capturing meaning.\n\n### Word2vec {#sec-word2vec}\n\nWord2vec was first introduced by @mikolov_etal_2013b and was refined by @mikolov_etal_2013c. They proposed a few variations on a simple neural network[^word2vec-1] that learns the relationships between words and contexts. Here we describe the most commonly used variation---continuous Skip-gram with negative sampling.[^word2vec-2] Imagine training the model on the following sentence:\n\n[^word2vec-1]: Some people think word2vec is too simple to be called a neural network. If you are one of these people, you are welcome to think of word2vec as a fancy sort of logistic regression instead.\n\n[^word2vec-2]: This section is partially adapted from @alammar_2019\n\n> Coding can be frustrating.\n\nOur Skip-gram training dataset would have one column for the input word, and another column for words from its immediate context. It is called \"continuous\" because it slides a context window along the training text (@sec-lsa-variations), considering each word as input, and the words immediately around it (e.g. 10 before and 10 after) as context, like this:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 12 × 2\n#>    word        context    \n#>    <chr>       <chr>      \n#>  1 coding      can        \n#>  2 coding      be         \n#>  3 coding      frustrating\n#>  4 can         coding     \n#>  5 can         be         \n#>  6 can         frustrating\n#>  7 be          coding     \n#>  8 be          can        \n#>  9 be          frustrating\n#> 10 frustrating coding     \n#> 11 frustrating can        \n#> 12 frustrating be\n```\n\n\n:::\n:::\n\n\nThe negative sampling method adds more rows to the training set, this time from words and contexts that do not go together, drawn at random from other parts of the corpus. A third column indicates whether the pair of words are really neighbors or not:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 12 × 3\n#>    word   context     neighbors\n#>    <chr>  <chr>           <dbl>\n#>  1 coding can                 1\n#>  2 coding be                  1\n#>  3 coding frustrating         1\n#>  4 can    coding              1\n#>  5 can    be                  1\n#>  6 can    frustrating         1\n#>  7 coding happy               0\n#>  8 coding olive               0\n#>  9 coding jump                0\n#> 10 can    happy               0\n#> 11 can    olive               0\n#> 12 can    jump                0\n```\n\n\n:::\n:::\n\n\nThe word2vec model takes the first two columns as input and tries to predict whether the two words are neighbors or not. It does this by learning two separate sets of embeddings: word embeddings and context embeddings.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](decontextualized-embeddings_files/figure-html/unnamed-chunk-17-1.png){width=768}\n:::\n:::\n\n\nFor each row of the training set, the model looks up the embedding for the target word and the embedding for the context word, and computes the dot product between the two vectors. The dot product is closely related to the cosine similarity, which we discussed in @sec-cosine-similarity---it measures how similar the two embeddings are. If the dot product is large (i.e. the word embedding and the context embedding are very similar), the model predicts that the two words are likely to be real neighbors. If the dot product is small, the model predicts that the two words were probably sampled at random.[^word2vec-3] During training, the model learns which word embeddings and context embeddings will do best at this binary prediction task.\n\n[^word2vec-3]: To learn why models like word2vec use dot products instead of cosine similarity, see @sec-embedding-magnitude below.\n\nNotice that word2vec (and fastText and GloVe) give each word two embeddings: one for when the word is the target and another for when it is the context [@goldberg_levy_2014]. This may seem strange, but it actually solves two important problems with LSA: \n\n1.    **A Nuance of the Distributional Hypothesis.** Recall the case of \"fridge\" and \"refrigerator\", which almost never appear together in the same sentence, but do tend to appear next to similar groupings of other words. Because LSA is based directly on broad patterns of covariance in word frequencies, it will pick up on the fact that \"fridge\" and \"refrigerator\" are negatively correlated and push them further apart than they should be. Word2vec, on the other hand, can learn a _context embedding_ for \"refrigerator\" that is not so close to the _word embedding_ for \"fridge\", even when the word embeddings of the two words are very close. This allows word2vec to recognize that \"refrigerator\" and \"fridge\" tend to appear in similar contexts, but are unlikely to appear together. In this way, word2vec is truer to the distributional hypothesis than LSA.\n2.    **Associative Asymmetry.** The cosine similarity between two word embeddings gives the best estimate of _conceptual similarity_ [@torabi-asr_etal_2018]. This is because conceptual similarity is not the same as association in language (or in the mind). In fact, psycholinguists have long known that human associations between two words are asymmetric. For example, people prompted with \"leopard\" are much more likely to think of \"tiger\" than people prompted with \"tiger\" are to think of \"leopard\" [@tversky_gati_1982]. These sorts of associative connections are closely tied to probabilities of co-occurrence in language and are therefore much better represented by the cosine similarity (or even the dot product) between a word embedding and a context embedding [@torabi-asr_etal_2018]. Thus the association between \"leopard\" and \"tiger\" would be represented by the similarity between the _word embedding_ of \"leopard\" and the _context embedding_ of \"tiger\", allowing for the asymmetry observed in mental associations.[^word2vec-4] Since LSA only produces one embedding per word, it cannot capture this asymmetry.\n\n[^word2vec-4]:  To the best of our knowledge, pretrained context embeddings are not available online. So if you are interested in associative (rather than conceptual) relationships between words, we recommend training your own model (see @sec-glove-training).\n\nWord2vec was revolutionary when it came out. The main reason for this is the efficiency of the training process. This efficiency means that the model can be trained on massive datasets. Larger and more diverse datasets mean more reliable embeddings. A few pretrained models can be easily downloaded from the Internet (e.g. from [here](https://github.com/maxoodf/word2vec?tab=readme-ov-file#basic-usage) or [here](https://www.kaggle.com/datasets/pkugoodspeed/nlpword2vecembeddingspretrained)). Because these models are trained on very large datasets and are already known to perform well, it almost never makes sense to train your own word2vec from scratch.\n\nOnce you've downloaded a pretrained model (generally as a .bin file), you can open it in R with the [`word2vec` package](https://cran.r-project.org/web/packages/word2vec/readme/README.html). Here we'll be using a model trained on the entirety of Google news, downloaded from [here](https://www.kaggle.com/datasets/pkugoodspeed/nlpword2vecembeddingspretrained/download?datasetVersionNumber=1), which uses 300-dimensional embeddings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(word2vec)\n\n# model file path\nword2vec_mod <- \"data/GoogleNews-vectors-negative300.bin\"\n\n# open model\nword2vec_mod <- read.word2vec(file = word2vec_mod, normalize = TRUE)\n```\n:::\n\n\nTo find embeddings of specific words, use `predict(word2vec_mod, c(\"word1\", \"word2\"), type = \"embedding\")`. To get embeddings for full documents, average the embeddings of the words in the document. Here we provide a function to compute document embeddings directly from a DFM.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntextstat_embedding <- function(dfm, model){\n  feats <- featnames(dfm)\n  # find word embeddings\n  feat_embeddings <- predict(model, feats, type = \"embedding\")\n  feat_embeddings[is.na(feat_embeddings)] <- 0\n  # average word embeddings of each document\n  out_mat <- (dfm %*% feat_embeddings)/ntoken(dfm)\n  colnames(out_mat) <- paste0(\"V\", 1:ncol(out_mat))\n  as_tibble(as.matrix(out_mat), rownames = \"doc_id\")\n}\n```\n:::\n\n\nLet's use word2vec embeddings and cosine similarity to reanalyze the Hippocorpus data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# embedding of the word \"surprised\"\nsurprise_embedding <- predict(word2vec_mod, \"surprised\", type = \"embedding\") |> \n  as.vector()\n\n# document embeddings\nhippocorpus_word2vec <- hippocorpus_dfm |> \n  textstat_embedding(word2vec_mod)\n\n# score documents by surprise\nhippocorpus_surprise_word2vec <- hippocorpus_word2vec |> \n  rowwise() |> \n  mutate(\n    surprise = cos_sim(c_across(V1:V300), surprise_embedding),\n    # transform cosine similarity to stay between 0 and 1\n    surprise = surprise/2 + 1/2\n    ) |> \n  ungroup() |> \n  select(-c(V1:V300))\n\n# rejoin docvars\nhippocorpus_surprise_word2vec <- hippocorpus_surprise_word2vec |> \n  bind_cols(docvars(hippocorpus_corp))\n\n# logistic regression\nsurprise_mod_word2vec <- glm(\n  surprise ~ memType, \n  hippocorpus_surprise_word2vec, \n  family = binomial\n  )\n\nsummary(surprise_mod_word2vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> glm(formula = surprise ~ memType, family = binomial, data = hippocorpus_surprise_word2vec)\n#> \n#> Coefficients:\n#>                  Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept)      0.653260   0.040147  16.272   <2e-16 ***\n#> memTyperecalled -0.010207   0.056614  -0.180    0.857    \n#> memTyperetold   -0.007718   0.070509  -0.109    0.913    \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for binomial family taken to be 1)\n#> \n#>     Null deviance: 3.8973  on 6853  degrees of freedom\n#> Residual deviance: 3.8631  on 6851  degrees of freedom\n#> AIC: 5775.3\n#> \n#> Number of Fisher Scoring iterations: 4\n```\n\n\n:::\n:::\n\n\nOnce again we found no significant difference between recalled and imagined stories.\n\n**An example of word2vec in research:** @chatterjee_etal_2023 used word2vec to study the phenomenon of nominative determinism---the purported tendency to chose a profession or city with a first letter that matches the first letter of one's name (e.g. someone named Louis might choose to be a language researcher). They first used a word2vec model trained on Google News to obtain embeddings for 3,410 first names, 508 professions, and 14,856 US cities. They then averaged the embeddings of all names/professions/cities that begin with the same letter to obtain a vector representing names that begin with the letter \"A\", a vector representing professions that begin with the letter \"A\", etc. Using cosine similarity, they found that same-letter names and professions (e.g. Albert and Actuary) tend to be more similar than different-letter names and professions (e.g. Albert and Dentist), even when controlling for gender, ethnicity, and frequency. They found a similar pattern for names and cities.\n\n::: {.callout-tip icon=\"false\"}\n## Advantages of Word2vec\n\n-   **Accurately Represents Meaning:** By distinguishing between target and context words, word2vec stays true to the distributional hypothesis. Since it is not based on counts, it also avoids problems with non-linear relationships.\n-   **Efficient for Large Datasets:** This means that models can be trained on enormous amounts of text. Some such models are available for download on the Internet.\n:::\n\n::: {.callout-important icon=\"false\"}\n## Disadvantages of Word2vec\n\n-   **Relies on Word-Level Meaning:** Word2vec assumes that each word has only one meaning. This means that it has trouble with words that can mean more than one thing (e.g. deep learning _model_ vs. fashion _model_). Word2vec will learn the average of these meanings.\n-   **Works Best in English:** English words are generally spelled the same no matter where they are in a sentence. Word2vec doesn't work as well for languages that have more prefixes, suffixes, conjugations, etc., since it has to relearn the meaning for each form of the word.\n-   **Not Many Pretrained Models Available**\n:::\n\n### GloVe {#sec-glove}\n\nWord2vec produces spectacularly rich and reliable vector embeddings, but their reliance on randomly sampled pairs of words and contexts makes them somewhat noisy and overly sensitive to frequent tokens. The developers of word2vec managed to fix these problems by strategically filtering the training dataset, but @pennington_etal_2014 came up with a more elegant solution: Global Vectors (GloVe) is designed on the same principles of word2vec, but it is computed from global patterns of co-occurrence rather than individual examples.[^glove-1]\n\n[^glove-1]: GloVe is built on the same metric that we used in @sec-dla: relative frequency ratios. Rather than comparing two word frequencies in two groups of texts as we did in that chapter, it instead compares co-occurrence with one word to co-occurrence with another.\n\nEven though GloVe uses a different method of training, the embeddings it generates are very similar to those generated by word2vec. Because GloVe embeddings are so similar to word2vec embeddings, we will not go into detail here about the way the GloVe algorithm works. Nevertheless, GloVe does have one very important advantage over word2vec: Better pretrained models are available online. Whereas the most easily available word2vec model is trained on news, the [GloVe website](https://nlp.stanford.edu/projects/glove/) offers models trained on social media (`glove.twitter.27B.zip`) and on large portions of the Internet (Common Crawl). These models generalize better to social media texts (since they were trained on similar texts) and are likely to have richer representations of emotional or social content, since more examples of that content appear on social media than in the news or on Wikipedia.[^glove-2]\n\n[^glove-2]: Another notable difference between GloVe and word2vec is that the GLoVe averages the word embeddings and context embeddings rather than using only the word embeddings as word2vec does. This makes GloVe embeddings slightly better at representing overall meaning, but may blur the distinction between conceptual similarity and mental/linguistic association [@torabi-asr_etal_2018].\n\nSince the pretrained GloVe models are available in .txt format, you don't need a wrapper package to use them in R. Simply download the pretrained model, input the path to the file as `path_to_glove`, and run the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_to_glove <- \"data/glove/glove.twitter.27B.100d.txt\"\ndimensions <- as.numeric(str_extract(path_to_glove, \"[:digit:]+(?=d\\\\.txt)\"))\n\n# matrix with token embeddings\nglove_pretrained <- read_delim(\n  path_to_glove, \n  delim = \" \",\n  quote = \"\",\n  escape_double = FALSE,\n  col_names = c(\"token\", paste0(\"dim_\", 1:dimensions))\n  ) |> column_to_rownames(\"token\") |> as.matrix()\n\n# update class to \"embeddings\" (required for `predict.embeddings` function)\nclass(glove_pretrained) <- \"embeddings\"\n\n# function to retrieve embeddings\n#   `object`: an \"embeddings\" object (matrix with character rownames)\n#   `newdata`: a character vector of tokens\n#   `type`: 'embedding' gives the embeddings of newdata. \n#           'nearest' gives nearest embeddings by cosine similarity \n#           (requires the cos_sim function)\n#   `top_n`: for `type = 'nearest'`, how many nearest neighbors to output?\npredict.embeddings <- function(object, newdata, \n                               type = c(\"embedding\", \"nearest\"), \n                               top_n = 10L){\n  embeddings <- as.matrix(object)\n  if (type == \"embedding\") {\n    embeddings[newdata,]\n  }else{\n    if(length(newdata) > 1){\n      target <- as.vector(apply(embeddings[newdata,], 2, mean))\n    }else{\n      target <- as.vector(embeddings[newdata,])\n    }\n    sims <- apply(object, 1, cos_sim, target)\n    embeddings <- embeddings[rev(order(sims)),]\n    head(embeddings, top_n)\n  }\n}\n```\n:::\n\n\nYou can then proceed just as we did for word2vec, using the `textstat_embedding()` function provided in that section to compute document embeddings directly from a DFM.\n\n#### Training a Custom GloVe Model {#sec-glove-training}\n\nSince excellent pretrained GloVe embeddings are available online, it rarely makes sense to train your own model. Nevertheless, GloVe's elegant training procedure makes for easy integration with Quanteda. A tutorial on training a custom GloVe model in Quanteda can be found [here](https://quanteda.io/articles/pkgdown/replication/text2vec.html). \n\nWhy might you want to train a custom word embeddings model? Maybe you are interested in quantifying differences in individual word use between multiple large groups of text. For example, you might train a GloVe model on texts written by conservatives and another on texts written by liberals, and demonstrate that the word \"skirt\" is closer to the word \"woman\" in conservative language than it is in liberal language.\n\n::: {.callout-tip icon=\"false\"}\n## Advantages of GloVe\n\n-   **Elegant Training Procedure**\n-   **Psychologically Sensitive Pretrained Models**\n:::\n\n::: {.callout-important icon=\"false\"}\n## Disadvantages of GloVe\n\n-   **Requires Large Training Sets**\n-   **Relies on Word-Level Meaning**\n-   **Works Best in English**\n:::\n\n### FastText {#sec-fasttext}\n\nFastText [@bojanowski_etal_2017] is a specialized version of word2vec, designed to work with languages in which words take different forms depending on their grammatical place. Rather than learning a word embedding and a context embedding for each full word (e.g. \"quantify\" and \"quantification\" each get their own embedding), fastText learns a vector for each shingle within a word (see @sec-shingles). For example, \"quantify\" might be broken up into \"quant\", \"uanti\", \"antif\", and \"ntify\". But it doesn't treat each shingle as its own word. Rather, it trains on words just like word2vec and GloVe, but makes sure that the embedding of a word is equal to the _sum_ of all of the shingle vectors inside it. \n\nThis approach is mostly unnecessary for English, where words are generally spelled the same wherever they appear. But for more morphologically rich languages like Hebrew, Arabic, French, or Finnish, fastText works much better than word2vec and GloVe. This is because there might not be enough data for word2vec and GloVe to learn reliable representations of every form of every word, especially rare forms. FastText, on the other hand, can focus on the important subcomponents of the words that stay the same across different forms. This way it can learn rich representations even of rare forms of a word that don't appear in the training dataset (e.g. it could quantify the meaning of מחשבותייך even if it were only trained on מחשבה, מחשבות, חבר, and חברייך). \n\nAfter downloading a pretrained model from [this page](https://fasttext.cc/docs/en/crawl-vectors.html) [@grave_etal_2018], you can use fastText in R through the [`fastTextR` package](https://cran.r-project.org/web/packages/fastTextR/vignettes/Word_representations.html). Conveniently, `fastTextR` includes a dedicated function for obtaining full text embeddings, `ft_sentence_vectors()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fastTextR)\n\n# example texts\nheb_words <- c(\"מחשבותייך\", \"מחשבה\")\nheb_texts <- c(\"אל תחשוב שנקרא לשוננו לשון הקדש לגאותינו או לטעותינו, אבל הוא בדין, כי זה הלשון קדוש לא ימצאו בו שמות לאבר הבעילה בזכר או בנקבה\", \"הטעם שהזכיר על דעתי איננו אמת, כי מה שיכנו ישגלנה, ישכבנה, יורה כי משגל שם עצם לבעילה\")\n\n# load pretrained model from file\nheb_model <- ft_load(\"data/cc.he.300.bin\")\n\n# get word embeddings\nword_vecs <- ft_word_vectors(heb_model, heb_words)\n\n# get text embeddings\ntext_vecs <- ft_sentence_vectors(heb_model, heb_texts)\n```\n:::\n\n\n::: {.callout-tip icon=\"false\"}\n## Advantages of FastText\n\n-   **Better for Morphologically Rich Languages**\n-   **Better for Rare Words**\n-   **Can Infer Embeddings for Words That Were Not in Training Data**\n:::\n\n::: {.callout-important icon=\"false\"}\n## Disadvantages of FastText\n\n-   **More Complex:** This means larger files to download when using pretrained models. It also increases the risk of overfitting. \n:::\n\n### Interpreting Advanced Word Embeddings {#sec-embedding-magnitude}\n\nAdvanced word embedding algorithms like word2vec, GloVe, and fastText use the dot product of embeddings to measure how likely two words are to appear together. The dot product is the same as cosine similarity, except that it gets larger as the vectors get farther away from the origin (i.e. cosine similarity is the dot product of two normalized vectors). \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndot_prod <- function(x, y){\n  dot <- x %*% y\n  as.vector(dot)\n}\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](decontextualized-embeddings_files/figure-html/unnamed-chunk-24-1.png){width=768}\n:::\n:::\n\n\nRecall that in models like word2vec and GloVe, the dot product corresponds to the probability that two words occur together. Vectors with that are farther away from the origin will result in very positive or very negative dot products, making the model more confident in the pair of words either being neighbors or not. This means that the distance of a word embedding from the origin (also called the norm or magnitude) is proportional to the informativeness of the word [@schakel_wilson_2015; @oyama_etal_2023]. Therefore, the magnitude of the embedding measures how representative it is of certain contexts as opposed to others, similar to averaging the TF-IDF of a word across a corpus (@sec-tfidf). \n\nThe fact that the magnitude of a word embedding represents its informativeness is important, because it is the reason why an accurate embedding of a full text can be obtained by averaging the embeddings of each of its words---the embeddings automatically devalue frequent and uninformative words, and emphasize the words that are representative of the text's specific meaning [@ethayarajh_etal_2019].\n\nOnce average embeddings are computed, we almost always use cosine similarity to assess the relationships between embeddings. **The cosine similarity measures only the meanings of the two embeddings, while ignoring how specific they are to those meanings.** If the specificity of texts to your construct of interest is important to your analysis, consider using the dot product instead of cosine similarity. For more applications of word embedding magnitude, see @sec-navigating-vectorspace and @sec-linguistic-complexity.\n\n---\n",
    "supporting": [
      "decontextualized-embeddings_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}